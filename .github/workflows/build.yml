name: Build

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths-ignore:
      - "docs/**"
      - "logo/**"
  push:
    branches:
      - main
      - dev
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.head.ref || github.ref }}
  cancel-in-progress: true

env:
  RUST_VERSION: "1.67.1"
  NODE_VERSION: "18.16.0"
  PNPM_VERSION: "8.6.3"

jobs:
  build:
    name: "Build"
    timeout-minutes: 30
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    outputs:
      version: ${{ fromJson(steps.changelog.outputs.data).newVersion }}
      last-version: ${{ fromJson(steps.changelog.outputs.data).lastVersion }}
      changelog: ${{ fromJson(steps.changelog.outputs.data).changelog }}
      vscode-wing-changed: ${{ steps.git-diff-vscode-wing.outputs.diff }}

    steps:
      - name: Check git diff of VSCode Extension
        id: git-diff-vscode-wing
        run: |
          if git diff --quiet origin/${{ github.base_ref }} ${{ github.sha }} -- apps/vscode-wing; then
            echo "::set-output name=diff::false"
          else
            echo "::set-output name=diff::true"
          fi

      - run: git diff --name-only origin/${{ github.base_ref }} ${{ github.sha }} -- apps/vscode-wing
      - run: git diff --name-only $origin/{{ github.base_ref }}..${{ github.sha }} -- apps/vscode-wing
    # steps:
    #   - name: Checkout
    #     uses: actions/checkout@v3
    #     with:
    #       fetch-depth: 0

    #   - name: Setup pnpm
    #     uses: pnpm/action-setup@v2.2.4
    #     with:
    #       version: ${{ env.PNPM_VERSION }}

    #   - name: Setup Node
    #     uses: actions/setup-node@v3
    #     with:
    #       cache: "pnpm"
    #       node-version: ${{ env.NODE_VERSION }}

    #   - name: Install Rust
    #     uses: dtolnay/rust-toolchain@master
    #     with:
    #       toolchain: ${{ env.RUST_VERSION }}
    #       targets: |
    #         x86_64-unknown-linux-gnu
    #         wasm32-wasi
    #       components: rustfmt,clippy,rust-std

    #   - name: Setup Cargo Cache
    #     uses: Swatinem/rust-cache@v2

    #   - name: Install Dependencies
    #     run: pnpm install --frozen-lockfile

    #   - name: Changelog Generation
    #     id: changelog
    #     env:
    #       GENERATE_VERSION: ${{ github.event_name != 'push' || github.repository != 'winglang/wing' }}
    #     run: pnpm changelog

    #   - name: Build
    #     run: pnpm build
    #     env:
    #       SEGMENT_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_KEY }}

    #   - name: Package
    #     run: pnpm package

    #   - name: Upload tarballs
    #     uses: actions/upload-artifact@v3
    #     with:
    #       name: tarballs
    #       path: dist/*.tgz

    #   - name: Check git diff of VSCode Extension
    #     id: git-diff-vscode-wing
    #     run: |
    #       if git diff --quiet ${{ steps.setSHAs.outputs.base }} ${{ github.sha }} -- apps/vscode-wing; then
    #         echo "::set-output name=diff::false"
    #       else
    #         echo "::set-output name=diff::true"
    #       fi

    #   - name: Upload Extension
    #     uses: actions/upload-artifact@v3
    #     with:
    #       name: vscode-wing
    #       path: apps/vscode-wing/vscode-wing.vsix

    #   - name: Compress Docs
    #     run: tar -czvf docs.tgz docs/*

    #   - name: Upload Docs
    #     uses: actions/upload-artifact@v3
    #     with:
    #       name: docs
    #       path: docs.tgz

  # test:
  #   name: Test
  #   timeout-minutes: 30
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build
  #   env:
  #     CARGO_TERM_COLOR: always
  #     TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  #     TURBO_TEAM: ${{ vars.TURBO_TEAM }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v2.2.4
  #       with:
  #         version: ${{ env.PNPM_VERSION }}

  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         cache: "pnpm"
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@master
  #       with:
  #         toolchain: ${{ env.RUST_VERSION }}
  #         targets: |
  #           x86_64-unknown-linux-gnu
  #           wasm32-wasi
  #         components: rustfmt,clippy,rust-std

  #     - name: Setup Cargo Cache
  #       uses: Swatinem/rust-cache@v2

  #     - name: Install Dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Test
  #       run: pnpm test

  # benchmark:
  #   name: Benchmark
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build
  #   steps:
  #     - run: echo "skip"

  # e2e-test:
  #   name: E2E Test
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 1

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v2.2.4
  #       with:
  #         version: ${{ env.PNPM_VERSION }}

  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         cache: "pnpm"
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Download tarballs
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: tarballs

  #     - name: Install dependencies
  #       run: pnpm i --frozen-lockfile --filter hangar

  #     - name: Starting the verdaccio registry
  #       run: nohup pnpm verdaccio > nohup.out 2> nohup.err < /dev/null &
  #       working-directory: tools/hangar

  #     - name: Login to verdaccio registry
  #       run: pnpm npm-auth-to-token -u test -p test -e test@test.com -r http://localhost:4873/
  #       working-directory: tools/hangar

  #     - name: Publish tarballs to verdaccio registry
  #       run: for file in ../../dist/*.tgz ; do pnpm publish "$file" --no-git-checks --access public ; done
  #       working-directory: tools/hangar

  # quality-gate:
  #   name: Quality Gate
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build
  #     - e2e-test
  #     - benchmark
  #     - test
  #   steps:
  #     - name: Download patches
  #       uses: actions/download-artifact@v3
  #     - name: Check patches
  #       run: |
  #         PATCH_COUNT=0
  #         for f in $(find ./*.diff/*.diff); do
  #           PATCH_COUNT=$((PATCH_COUNT + 1))
  #           cat $f
  #         done
  #         if [ $PATCH_COUNT -gt 0 ]; then
  #           echo "Found $PATCH_COUNT patches, build failed. A self-mutation should happen soon."
  #           exit 1
  #         fi
  #     - name: All good
  #       run: echo "Builds and tests passed! ðŸŽ‰ðŸŽ‰ðŸŽ‰"

  # publish:
  #   name: Publish
  #   if: ${{ github.event_name == 'push' && github.repository == 'winglang/wing' && github.ref == 'refs/heads/main' }}
  #   needs:
  #     - quality-gate
  #     - build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download Build Artifacts
  #       uses: actions/download-artifact@v3

  #     - name: Tag commit
  #       uses: tvdias/github-tagger@v0.0.1
  #       if: ${{ needs.build.outputs.last-version != needs.build.outputs.version }}
  #       with:
  #         repo-token: "${{ secrets.PROJEN_GITHUB_TOKEN }}"
  #         tag: "v${{ needs.build.outputs.version }}"

  #     - name: Publish Extension to Visual Studio Marketplace
  #       if: needs.build.outputs.vscode-wing-changed == 'true'
  #       uses: "HaaLeo/publish-vscode-extension@v1"
  #       with:
  #         pat: ${{ secrets.VS_MARKETPLACE_TOKEN }}
  #         registryUrl: "https://marketplace.visualstudio.com"
  #         extensionFile: "vscode-wing/vscode-wing.vsix"
  #         dependencies: false

  #     - name: Login to NPM registry
  #       run: npm set //registry.npmjs.org/:_authToken ${{ secrets.NPM_PUBLISH_TOKEN }}

  #     - name: Check published WingSDK version
  #       id: wingsdk-version
  #       run: echo "version=$(npm view @winglang/sdk version)" >> $GITHUB_OUTPUT

  #     - name: Publish Wing SDK
  #       if: ${{ steps.wingsdk-version.outputs.version != needs.build.outputs.version }}
  #       working-directory: wingsdk
  #       run: npm publish *.tgz --access public

  #     - name: Check published Wing Compiler version
  #       id: wingcompiler-version
  #       run: echo "version=$(npm view @winglang/compiler version)" >> $GITHUB_OUTPUT

  #     - name: Publish Wing Compiler
  #       if: ${{ steps.wingcompiler-version.outputs.version != needs.build.outputs.version }}
  #       working-directory: wingcompiler
  #       run: npm publish *.tgz --access public

  #     - name: Check published Wing Console Design System version
  #       id: wingconsoledesignsystem-version
  #       run: echo "version=$(npm view @wingconsole/design-system version)" >> $GITHUB_OUTPUT

  #     - name: Publish Wing Console Design System
  #       if: ${{ steps.wingconsoledesignsystem-version.outputs.version != needs.build.outputs.version }}
  #       working-directory: wingconsoledesignsystem
  #       run: npm publish *.tgz --access public

  #     - name: Check published Wing Console UI version
  #       id: wingconsoleui-version
  #       run: echo "version=$(npm view @wingconsole/ui version)" >> $GITHUB_OUTPUT

  #     - name: Publish Wing Console UI
  #       if: ${{ steps.wingconsoleui-version.outputs.version != needs.build.outputs.version }}
  #       working-directory: wingconsoleui
  #       run: npm publish *.tgz --access public

  #     - name: Check published Wing Console Server version
  #       id: wingconsoleserver-version
  #       run: echo "version=$(npm view @wingconsole/server version)" >> $GITHUB_OUTPUT

  #     - name: Publish Wing Console Server
  #       if: ${{ steps.wingconsoleserver-version.outputs.version != needs.build.outputs.version }}
  #       working-directory: wingconsoleserver
  #       run: npm publish *.tgz --access public

  #     - name: Check published Wing Console App version
  #       id: wingconsoleapp-version
  #       run: echo "version=$(npm view @wingconsole/app version)" >> $GITHUB_OUTPUT

  #     - name: Publish Wing Console App
  #       if: ${{ steps.wingconsoleapp-version.outputs.version != needs.build.outputs.version }}
  #       working-directory: wingconsoleapp
  #       run: npm publish *.tgz --access public

  #     - name: Check published Wing version
  #       id: wing-version
  #       run: echo "version=$(npm view winglang version)" >> $GITHUB_OUTPUT

  #     - name: Publish Wing
  #       if: ${{ steps.wing-version.outputs.version != needs.build.outputs.version }}
  #       working-directory: wing
  #       run: npm publish *.tgz --access public

  #     - name: Rename Docs
  #       run: mv docs "docs-${{ needs.build.outputs.version }}.tgz"

  #     - name: Write Changelog
  #       uses: DamianReeves/write-file-action@v1.2
  #       with:
  #         path: "CHANGELOG.md"
  #         contents: ${{ needs.build.outputs.changelog }}
  #         write-mode: overwrite

  #     - name: Compute Checksums
  #       run: |
  #         mkdir dist
  #         mv ./*/*.vsix ./dist
  #         mv ./*/*.tgz ./dist
  #         mv ./*/*.wasm ./dist
  #         mv ./benchmarks/* ./dist
  #         cd dist

  #         echo '' >> ../CHANGELOG.md
  #         echo '### SHA-1 Checksums' >> ../CHANGELOG.md
  #         echo '```' >> ../CHANGELOG.md
  #         sha1sum --binary * >> ../CHANGELOG.md
  #         echo '```' >> ../CHANGELOG.md
  #         cat ../CHANGELOG.md

  #     - name: Cut Development Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         name: "Wing ${{ needs.build.outputs.version }}"
  #         tag_name: "v${{ needs.build.outputs.version }}"
  #         body_path: CHANGELOG.md
  #         files: dist/*
  #         token: ${{ secrets.PROJEN_GITHUB_TOKEN }}
